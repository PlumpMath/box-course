#!python
'''
command line utility for box course

box-course -h for documentation
'''

import json, os

from box_course import *
from box_course.box import *

print BOX_TOKEN

# we get andrewids from the roster file
ANDREWIDS = []
LASTNAMES, FIRSTNAMES = [], []
with open(ROSTER) as f:
    for line in f:
        line = line.strip()
        if not line:
            continue
        
        fields = line.split(',')
        andrewid = fields[1]
        LASTNAMES.append(fields[2])
        FIRSTNAMES.append(fields[3])
        ANDREWIDS.append(andrewid)


# this is where we store everything we need to remember
COURSE_CACHE = LOCAL_COURSE_ROOT + '/' + COURSE + '.json'

if os.path.exists(COURSE_CACHE):
    with open(COURSE_CACHE) as f:
        data = json.loads(f.read())
else:
    data = {}

if 'ASSIGNMENTS' not in data:
    data['ASSIGNMENTS'] = {}

    with open(COURSE_CACHE, 'wb') as f:
        f.write(json.dumps(data, sort_keys=True, indent=4))


def load_cache():
    if os.path.exists(COURSE_CACHE):
        with open(COURSE_CACHE) as f:
            data = json.loads(f.read())
    else:
        data = {}
    return data


def save_cache(data):
    # now save data in case it was updated
    with open(COURSE_CACHE, 'wb') as f:
        f.write(json.dumps(data, sort_keys=True, indent=4))


def init(args):
    # Make the main root
    d = create_folder(BOX_COURSE_ROOT)
    rootid = d['id']
    update_folder_information(rootid, description='''\
This is the top level folder for the course. It is owned by the instructor, and not visible to anyone else.''')

    ##################################################################
    # Add the site folder which all students can view
    print 'creating course site and setting students to be viewers'
    d = create_folder('{0}-site'.format(COURSE), rootid)
    update_folder_information(d['id'], description='''
Put all information you want students to see here. All students on the roster will be able to view this folder.''')
                              
    # Add each student as a viewer to this folder
    for andrewid in ANDREWIDS:
        print 'made {0} a viewer'.format(andrewid)
        add_collaboration(d['id'], andrewid + '@andrew.cmu.edu', 'viewer')

    # and the TAs
    for ta in TAS:
        add_collaboration(d['id'], ta, 'viewer')

    ##################################################################
    # Create the folder where student work will go
    d = create_folder('students', rootid)
    update_folder_information(d['id'], description='''
This folder will contain a folder for each student. Only you, the TAs and the student will be able to view their folder.''')
    # and the TAs
    for ta in TAS:
        add_collaboration(d['id'], ta, 'editor')

    # now add a student folder for each person, and make them an
    # editor of the folder
    for andrewid, firstname, lastname in zip(ANDREWIDS, FIRSTNAMES, LASTNAMES):
        sd = create_folder(andrewid, d['id'])
        update_folder_information(sd['id'], description='''{0} {1}
This is your personal, private folder to put your assignments in. The instructor and TAs can see everything here. Other students cannot see what is in here. We will create a folder for each assignment that you will upload your completed assignment to.'''.format(firstname, lastname))
        add_collaboration(sd['id'], andrewid + '@andrew.cmu.edu', 'viewer')
        print 'created students/{0} and set {0} as viewer'.format(andrewid)
     
    # this is a folder for a database of problems that may be assigned
    d = create_folder('problems', rootid)
    update_folder_information(d['id'], description='''
This is where you want to put your database of problems. Each file should contain a problem or problem set you want to assign to students. The file should be named as <<assessment>>.ext where assessment is a label you can refer to. ext is usually .py because the create function below assumes that is what it is.''')

def update(args):
    pass


def create(args):
    '''creates the assessment directory structure with copies of assessment in each student directory
    
    does not assign the assessment. This is a separate command because it is slow. Sync is not reliable enough to create locally, so this command does everything remotely using the box api.
    '''
    data = load_cache()

    for assessment in args.assignment_label:
        if assessment not in data['ASSIGNMENTS']:
            data['ASSIGNMENTS'][assessment] = {}

        for andrewid in ANDREWIDS:
            path = '/'.join([BOX_ASSESSMENT_ROOT, 
                             assessment, 
                             '-'.join([andrewid, COURSE, assessment])])
            if (path not in data['ASSIGNMENTS'][assessment]) or args.force:
                print('Creating {0}'.format(path))
                data['ASSIGNMENTS'][assessment][path] = {}
                d = create_folder(path)  # box

                data['ASSIGNMENTS'][assessment][path]['folder_id'] = d['id'] 

                if args.description:
                    update_folder_information(d['id'],
                                              description=args.description)
                
                assessment_file = LOCAL_PROBLEMS + '/{0}'.format(assessment)
                if os.path.isfile(assessment_file):
                    upload(assessment_file, d['id'], new_version=True)
                elif os.path.isfile(assessment_file + '.py'):
                    upload(assessment_file + '.py', d['id'], new_version=True)
                elif os.path.isdir(assessment_file):
                    for f in os.listdir(assessment_file):
                        upload(os.path.join(assessment_file, f), d['id'], new_version=True)
                save_cache(data)


def assign(args):
    '''Sets permissions on the assessment directory to editor.

    adds the assignment to the assignments.json file.'''
    data = load_cache()
    for assessment in args.assignment_label:
        for andrewid in ANDREWIDS:
            if assessment not in data['ASSIGNMENTS']:
                create(args)

            data['ASSIGNMENTS'][assessment]['category'] = args.category
            data['ASSIGNMENTS'][assessment]['points'] = args.points
            data['ASSIGNMENTS'][assessment]['due'] = args.due_date
                                
            
            path = '/'.join([BOX_ASSESSMENT_ROOT, assessment, '-'.join([andrewid, COURSE, assessment])])
            print('Setting {0} to editor'.format(andrewid))
            # this is the id of the folder to add collaboration to
            id = data['ASSIGNMENTS'][assessment][path]['folder_id']

            # we check if a collaboration exists
            if 'collab_id' in data['ASSIGNMENTS'][assessment][path]:
                # just to be sure, we edit the collaboration.
                collab_id = data['ASSIGNMENTS'][assessment][path]['collab_id']
                edit_collaboration(collab_id, role='editor')
            else:
                d = add_collaboration(id, andrewid + '@andrew.cmu.edu', 'editor')
                data['ASSIGNMENTS'][assessment][path]['collab_id'] = d['id']

            save_cache(data)


def collect(args):
    '''Set collaboration to viewer

    '''
    data = load_cache()
    for assessment in args.assignment_label:
        for andrewid in ANDREWIDS:
            path = '/'.join([BOX_ASSESSMENT_ROOT, assessment, '-'.join([andrewid, COURSE, assessment])])
            print('Setting {0} to viewer'.format(andrewid))

            collab_id = data['ASSIGNMENTS'][assessment][path]['collab_id']
            edit_collaboration(collab_id, role='viewer')


def timed(args):
    print args
    # assign the problem
    assign(args)
        
    from box_course.timer import MyApp
    app = MyApp(False)
    app.set_time(args.time * 60)
    app.set_warning_time(args.warning * 60)
    app.set_buffer_time(args.buffer * 60)
    
    app.run()
    app.MainLoop()
        
    # collect the problem
    collect(args)


def email(args):
    print 'running email with', args


def update_grade_report(args):
    andrewids = args.andrewids
    if andrewids[0] == 'all':
        andrewids = ANDREWIDS

    for andrewid in andrewids:
        for assignment, points, category, duedate in ASSIGNMENTS:
            print andrewid, assignment
    


def emacs(args):
    '''prints org-mode lists and links'''
    print args
    pass


def summarize(args):
    '''print summary statistics.

    --plot adds a histogram
    --overall semester grades
    '''
    pass

def refresh(args):
    '''get new tokens from box.com'''
    refresh_tokens()

def config(args):
    '''prints the config file.'''
    dir, last = os.getcwd(), True
    while last:
        dir, last = os.path.split(dir)
        cfile = os.path.join(dir, 'box_course_config.py')
        if os.path.exists(cfile):
            with open(cfile) as f:
                s = f.readlines()
            print ''.join(s)



if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(prog='box-course')
    
    #http://docs.python.org/2/library/argparse.html#sub-commands
    subparsers = parser.add_subparsers(help='help for sub-commands')

    p_init = subparsers.add_parser('init', help='initialize course from roster and config file')
    p_init.set_defaults(func=init)

    p_update = subparsers.add_parser('update', 
                                   help='update course')
    p_update.set_defaults(func=update)

    # for creating an assignment
    p_create = subparsers.add_parser('create', help='create an assignment')
    p_create.add_argument('assignment_label', nargs='+')
    p_create.add_argument('-d', '--description', help='description of assignment')
    p_create.add_argument('-f', '--force', action='store_true', help='overwrite existing directories')
    p_create.set_defaults(func=create)

    # for assigning an assignment
    p_assign = subparsers.add_parser('assign', 
                                     help='assign an assignment')
    p_assign.add_argument('assignment_label', nargs='+')
    p_assign.add_argument('-c', '--category', help='Category the assignment is in')
    p_assign.add_argument('-p', '--points', help='How many points the assignment is worth')
    p_assign.add_argument('-d', '--due-date', help='when the assignment is due 02M-02D-04Y, e.g. 11-12-2013')
    p_assign.set_defaults(func=assign)

    # for collecting an assignment
    p_collect = subparsers.add_parser('collect', 
                                      help='collect an assignment')
    p_collect.add_argument('assignment_label', nargs='+')
    p_collect.set_defaults(func=collect)

    # for running a timed assessment
    p_timed = subparsers.add_parser('timed',
                                   help='Run a timed assignment')
    p_timed.add_argument('assignment_label', nargs='+')
    p_timed.add_argument('-t','--time', 
                         type=float, 
                         help='Time to run assessmment in the minutes', 
                         default=20)
    p_timed.add_argument('-w','--warning', 
                         type=float, 
                         help='Time in minutes to warn that the end is coming (timer is yellow)', 
                         default=2)
    p_timed.add_argument('-b','--buffer', 
                         type=float, 
                         help='Time (minutes) after its over to allow uploads', 
                         default=1.0)
    p_timed.set_defaults(func=timed)

    # summary statistics of assignments or course
    p_summarize = subparsers.add_parser('summarize',
                                        help='print summary statistics')
    p_summarize.add_argument('assessment', nargs='+')
    p_summarize.set_defaults(func=summarize)

    # for sending email to users
    p_email = subparsers.add_parser('email', help='email class')
    p_email.add_argument('andrewids', nargs='+')
    p_email.add_argument('-m','--message')
    p_email.set_defaults(func=email)

    # to calculate grade reports
    p_update_grade_report = subparsers.add_parser('update-grade-report',
                                                  help='update grade reports')
    p_update_grade_report.add_argument('andrewids', nargs='+')
    p_update_grade_report.set_defaults(func=update_grade_report)

    # print lists for org-mode in emacs
    p_emacs = subparsers.add_parser('emacs', 
                                    help='prints list of links for emacs org-mode')
    p_emacs.add_argument('assignment')
    p_emacs.add_argument('andrewids', nargs='+')
    p_emacs.set_defaults(func=emacs)
    
    p_refresh = subparsers.add_parser('authenticate', 
                                    help='refreshes your tokens')
    p_refresh.set_defaults(func=refresh)

    p_config = subparsers.add_parser('config', 
                                    help='print your configuration')
    p_config .set_defaults(func=config)

    args = parser.parse_args()
    args.func(args)
