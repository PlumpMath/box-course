#!python
'''
command line utility for box

box -h for documentation
'''

import json, os
import dateutil 

from box_course import *
from box_course.box import *

def get_box_path(fname_or_dir):
    '''returns the box path of the arg which is a local file or directory'''
    
    wd, last = os.getcwd(), True
    while last:
        wd, last = os.path.split(wd)
        cfile = os.path.join(wd, 'Box Sync ReadMe.pdf')
        if os.path.exists(cfile):
            # we found box root
            break


    return os.path.normcase(os.path.abspath(fname_or_dir)).replace(os.path.normcase(wd), '').replace('\\','/')

def collaboration(args):
    '''
    creates/modifies/deletes collaboration in cwd

    data is stored in .box-json
    {"login":{"collab_id":id, "role":role}}
    '''

    if os.path.exists('.box-json'):
        with open('.box-json', 'rb') as f:
            data = json.loads(f.read())
    else:
        data = {}

    cwd = os.getcwd()

    if args.list_collaborations:

        boxdir = get_box_path('.')
        entry = get_item(boxdir)  
        print 'Collaborations:'
        r = get_collaborations(entry['id'])
        for entry in r['entries']:
            print '''
  status:    {0}
  login:     {1}
  role:      {2}
  collab-id: {3}'''.format(entry['status'], entry['accessible_by']['login'], entry['role'], entry['id'])
        return

    for login in args.logins:
        if args.remove:
            if login in data:
                delete_collaboration(data[login]['collab_id'])
                del data[login]
                if data:
                    with open('.box-json', 'wb') as f:
                        f.write(json.dumps(data))
                else:
                    os.unlink('.box-json')
                print 'removed {0} as {1}'.format(login, args.role)
            else:
                print 'No record of {0} as {1}'.format(login, args.role)
        else:
            if login in data:
                edit_collaboration(data[login]['collab_id'], args.role)
                data[login]['role'] = args.role
            else:
                # get id of cwd
                # This probably is not cross-platform. I have to replace the slashes too.
                abspath = os.path.normcase(os.path.abspath('.'))
                boxdir = abspath.replace(os.path.normcase(BOX_SYNC_ROOT), '')   

                print boxdir,'---',BOX_SYNC_ROOT
                entry = get_item(boxdir.replace('\\','/'))  
                
                r = add_collaboration(entry['id'], login, args.role)
                
                data[login] = {}
                data[login]['collab_id'] = r['id']
                data[login]['role'] = args.role
            
            # now update the data file
            with open('.box-json', 'wb') as f:
                f.write(json.dumps(data))
            
            print 'added/edited {0} as {1}'.format(login, args.role)

def task(args):
    '''creates and assigns a task on a file to a person.

    stores data in .box-json

    {file:{id:file_id, task_id:{assigned_to:login}}}
    '''

    from dateutil import parser
    from datetime import datetime

    if os.path.exists('.box-json'):
        with open('.box-json', 'rb') as f:
            data = json.loads(f.read())
    else:
        data = {}

    # parse due_at if it is provided to get into standard form.
    if args.due_at:
        ts = parser.parse(args.due_at)
        due_at = '{0}-{1}-{2}T{3:02d}:{4:02d}:{5:02d}-05:00'.format(ts.year, ts.month, ts.day, 
                                                                    ts.hour, ts.minute, ts.second)
    else:
        due_at = None

    # this is where I update the message/due date
    if args.update_task:
        tid = args.update_task
        r = update_task(tid, args.message, due_at)
        print r
        return

    if args.list_tasks:
        print 'listing tasks'
        f = args.list_tasks  # this is the file to list tasks for
        boxfile = get_box_path(f)

        if boxfile in data:
            fileid = data[boxfile]['file-id']
        else:
            r = get_item(boxfile)
            fileid = r['id']
        
        r = get_file_tasks(fileid)
        print 'Task details:'
        for task in r['entries']:
            taskid = task['id']
            r = get_task(taskid)
            #print json.dumps(r, sort_keys=True, indent=4)
            print '''Task {0}
   message: {1}
   due_at:  {2}'''.format(r['id'], r['message'],r['due_at'])

            for entry in r['task_assignment_collection']['entries']:
                print '''Assigned to:
 task_assignment id: {0}
   {1}'''.format(entry['assigned_to']['id'],entry['assigned_to']['login'])
        return

    # first, get id of the file.
    boxfile = get_box_path(args.file)
    
    if not os.path.isfile(abspath):        
        raise Exception('You can only assign a task to an existing file')

    if boxfile in data:
        id = data[boxfile]['file-id']
    else:
        # get the id for the file
        entry = get_item(boxfile)
        id = entry['id']
        data[boxfile] = {}
        data[boxfile]['file-id'] = id
        with open('.box-json', 'wb') as f:
            f.write(json.dumps(data))

    # first create the task and store the id
    r = create_task(id, message=args.message, due_at=due_at)
    tid = r['id']
    print 'task-id = ',r
    data[boxfile][tid] = {}
    data[boxfile][tid]['message'] = args.message
    data[boxfile][tid]['due_at'] = due_at
    data[boxfile][tid]['assignments']={}
    with open('.box-json', 'wb') as f:
        f.write(json.dumps(data))

    # now assign the task
    for login in args.logins:
        r = assign_task(tid, login)
        taid = r['id']
        data[boxfile][tid]['assignments'][taid] = login
        print 'assigned {0} to {1}'.format(taid, login)
        with open('.box-json', 'wb') as f:
            f.write(json.dumps(data))


def comment(args):
    boxfile = get_box_path(args.file)
    j = get_item(boxfile)
    add_comment(j['id'], args.message)

def refresh(args):
    '''get new tokens from box.com'''
    refresh_tokens()





if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(prog='box')
    
    #http://docs.python.org/2/library/argparse.html#sub-commands
    subparsers = parser.add_subparsers(help='help for sub-commands')


    # for creating/editing a collaboration
    p_collab = subparsers.add_parser('collaborate', help='create a collaboration in cwd')
    p_collab.add_argument('logins', nargs='*')
    p_collab.add_argument('-l','--list-collaborations', action='store_true')
    p_collab.add_argument('-r', '--role', 
                          default='viewer',
                          help='role, e.g. editor, viewer')
    p_collab.add_argument('-R','--remove', 
                          action='store_true',
                          help='remove collaboration for logins')
    p_collab.set_defaults(func=collaboration)

    # for assigning an task
    p_task = subparsers.add_parser('task', help='create a task')
    p_task.add_argument('file', nargs='?')
    p_task.add_argument('logins', nargs='*')
    p_task.add_argument('-m', '--message', help='message for task')
    p_task.add_argument('-d','--due-at', help='''Due date. try to use a reasonable format. some examples are:
Dec 13 2103 9am''')
    p_task.add_argument('-l','--list-tasks', help='list tasks for this file')

    p_task.add_argument('-U','--update-task', help='update a task by its id')
    p_task.set_defaults(func=task)

    # adding comments to files
    p_com = subparsers.add_parser('comment', help='create a comment')
    p_com.add_argument('file', nargs='?')
    p_com.add_argument('-m', '--message', help='message for comment')
    p_com.set_defaults(func=comment)

    ##################################################################
    p_refresh = subparsers.add_parser('authenticate', 
                                    help='refreshes your tokens')
    p_refresh.set_defaults(func=refresh)

    args = parser.parse_args()
    args.func(args)
